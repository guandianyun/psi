<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.bytechainx.psi</groupId>
		<artifactId>psi-opensource</artifactId>
		<version>2.1.0</version>
	</parent>
	<artifactId>psi-web</artifactId>
	<packaging>jar</packaging>
	<name>psi-web</name>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.encoding>UTF-8</maven.compiler.encoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>com.bytechainx.psi</groupId>
			<artifactId>psi-fund</artifactId>
			<version>2.1.0</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.bytechainx.psi</groupId>
			<artifactId>psi-sale</artifactId>
			<version>2.1.0</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.bytechainx.psi</groupId>
			<artifactId>psi-purchase</artifactId>
			<version>2.1.0</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>net.alchim31.maven</groupId>
			<artifactId>yuicompressor-maven-plugin</artifactId>
			<version>1.5.1</version>
		</dependency>

	</dependencies>

	<build>
		<!-- 添加 includes 配置后，excludes 默认为所有文件 **/*.*，反之亦然 该规则在 maven-jar-plugin 
			等插件中同样适用 -->
		<resources>
			<!-- 添加该配置是为了将 .sql 文件打入 jar 包 -->
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<!-- **/* 前缀用法，可以匹配所有路径 -->
					<include>**/*.sql</include>
				</includes>
			</resource>

			<!-- 没有添加 resources 配置时，src/main/resources 目录是默认配置 一旦添加 resources 配置指向 
				src/main/java 目录时，原先的默认配置被取代， 所以需要添加如下配置将默认配置再添加进来，否则无法使用 src/main/resources 
				下的资源文件 -->
			<resource>
				<directory>src/main/resources</directory>
			</resource>
		</resources>


		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.6.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
					<!-- java8 保留参数名编译参数 -->
					<compilerArgument>-parameters</compilerArgument>
					<compilerArguments>
						<verbose />
					</compilerArguments>
				</configuration>
			</plugin>

			<!-- jar 包中的配置文件优先级高于 config 目录下的 "同名文件" 因此，打包时需要排除掉 jar 包中来自 src/main/resources 
				目录的 配置文件，否则部署时 config 目录中的同名配置文件不会生效 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<excludes>
						<!-- *.* 用法，可以匹配 jar 包根目录下所有文件 *.xxx 用法，可以匹配 jar 包根目录下特定扩展名文件，例如：*.xml 
							**/* 前缀用法，可以匹配所有路径，例如：**/*.txt -->
						<exclude>*.*</exclude>
					</excludes>
				</configuration>
			</plugin>

			<!-- 使用 mvn clean package 打包 更多配置可参考官方文档：http://maven.apache.org/plugins/maven-assembly-plugin/single-mojo.html -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>

						<configuration>
							<!-- 打包生成的文件名 -->
							<finalName>${project.artifactId}</finalName>
							<!-- jar 等压缩文件在被打包进入 zip、tar.gz 时是否压缩，设置为 false 可加快打包速度 -->
							<recompressZippedFiles>false</recompressZippedFiles>
							<!-- 打包生成的文件是否要追加 package.xml 中定义的 id 值 -->
							<appendAssemblyId>true</appendAssemblyId>
							<!-- 指向打包描述文件 package.xml -->
							<descriptors>
								<descriptor>package.xml</descriptor>
							</descriptors>
							<!-- 打包结果输出的基础目录 -->
							<outputDirectory>${project.build.directory}/</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			
			<!-- JavaScript CSS Compress -->
			<plugin>
			    <groupId>com.samaxes.maven</groupId>
			    <artifactId>minify-maven-plugin</artifactId>
			    <version>1.7.6</version>
			    <executions>
			        <execution>
			            <id>default-minify</id>
			            <configuration> 
                  <webappTargetDir>${project.build.directory}/classes</webappTargetDir>
			                <charset>UTF-8</charset>
			                <closureWarningLevels>
				                <es5Strict>OFF</es5Strict>
				            </closureWarningLevels>
			                <cssSourceDir>src/main/webapp/resources</cssSourceDir>
			                <!--将压缩后的css文件放到以下目录下-->
			                <cssTargetDir>../static</cssTargetDir>
			                <cssIncludes>
			                    <cssInclude>**/*.css</cssInclude>
			                </cssIncludes>
			                <cssExcludes>
			                    <cssExclude>**/*.min.css</cssExclude>
			                    <jsExclude>**/barQrCode/**</jsExclude>
			                    <jsExclude>**/bootstrap/**</jsExclude>
			                    <jsExclude>**/echarts/**</jsExclude>
			                    <jsExclude>**/jquery/**</jsExclude>
			                    <jsExclude>**/jquery-color/**</jsExclude>
			                    <jsExclude>**/jQuery-contextMenu/**</jsExclude>
			                    <jsExclude>**/layer/**</jsExclude>
			                    <jsExclude>**/My97DatePicker/**</jsExclude>
			                    <jsExclude>**/wangeditor/**</jsExclude>
			                </cssExcludes>
			 
			                <!-- 压缩src/main/resources/static目录下的所有js文件，但是排除*.min.js文件； -->
			                <jsSourceDir>src/main/webapp/resources</jsSourceDir>
			                <!--将压缩后的js文件放到以下目录下-->
                            <jsTargetDir>../static</jsTargetDir>
			                <jsIncludes>
			                    <jsInclude>**/*.js</jsInclude>
			                </jsIncludes>
			                <jsExcludes>
			                    <jsExclude>**/*.min.js</jsExclude>
			                    <jsExclude>**/jquery-ui.js</jsExclude>
			                    <jsExclude>**/barQrCode/**</jsExclude>
			                    <jsExclude>**/bootstrap/**</jsExclude>
			                    <jsExclude>**/echarts/**</jsExclude>
			                    <jsExclude>**/jquery/**</jsExclude>
			                    <jsExclude>**/jquery-color/**</jsExclude>
			                    <jsExclude>**/jQuery-contextMenu/**</jsExclude>
			                    <jsExclude>**/layer/**</jsExclude>
			                    <jsExclude>**/My97DatePicker/**</jsExclude>
			                    <jsExclude>**/wangeditor/**</jsExclude>
			                    
			                </jsExcludes>
			                
			 
			                <!-- 使用closure压缩时的压缩级别，默认值为SIMPLE_OPTIMIZATIONS。可选值： -->
			                <!-- WHITESPACE_ONLY：只压缩空格和转换一些特殊符号 -->
			                <!-- SIMPLE_OPTIMIZATIONS：简单的压缩 -->
			                <!-- ADVANCED_OPTIMIZATIONS：高级压缩，此压缩方式下可能会将引用的第3方框架的方法名称修改，导致js报错；慎用。 -->
			                <closureCompilationLevel>SIMPLE_OPTIMIZATIONS</closureCompilationLevel>
			                <webappSourceDir>${project.basedir}</webappSourceDir>
			 
			                <!-- js压缩引擎，默认值为YUI。可选值： -->
			                <!-- YUI: 使用YUI Compressor压缩； -->
			                <!-- CLOSURE: 使用Google Closure Compiler压缩 -->
			                <jsEngine>CLOSURE</jsEngine>
			                <skipMerge>true</skipMerge><!-- 不合并js/css -->
			                <nosuffix>true</nosuffix><!-- 压缩后的文件不.js前添加.min前缀 -->
			            </configuration>
			            <goals>
			                <goal>minify</goal>
			            </goals>
			        </execution>
			    </executions>
			</plugin>

		</plugins>
	</build>

	<!-- 使用阿里 maven 库 -->
	<repositories>
		<repository>
			<id>ali-maven</id>
			<url>https://maven.aliyun.com/repository/public</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>always</updatePolicy>
				<checksumPolicy>fail</checksumPolicy>
			</snapshots>
		</repository>
	</repositories>

</project>